  如果一个同事对你说，“我的爱人今天晚上制造了在家里吃一顿不寻常的饭。你会加入吗?”你可能会想到三件事:第三，你被邀请吃饭;第二，英语不是你同事的第一语言;第一，有很多困惑
  如果你曾经自己学习过一门外语，然后试图工作生活中使用它，你知道有三件事你必须掌握:如何去组织语言的结构(语法)，你们谈论的东西是什么(词汇)，以及日常用语的习惯和有效方式(用法)。
通常，教室里只有前两项内容，当你尝试去理解第三项时，你就会发现母语者正连续不断抑制他们的笑声。
  编程语言也是如此。你首先需要了解它属于哪种核心语言:算法式语言？函数式语言？面向对象语言（TODO）？你也需要知道一些词汇，它可以让你知道标准类库提供的数据结构、允许的操作、
以及一些工具类。你需要以一种本能且高效的方式编写你的代码。有关编程语言的书籍经常涉及只讨论语法和词汇，或者只零星地讨论用法。也许这是因为语法和词汇在某种程度上更容易理解和表述。
语法和词汇是语言本身的属性，但是用法是社区实际使用时的特征。
  例如，Java编程语言是一种支持单继承式面向对象，并且每个方法内支持命令式（面向语句）代码风格的编程语言。这些库提供图形显示、网络、分布式计算和安全性相关的支持。
但是，如何在实践中最好地使用这种语言呢?
  还有一点，编程语言不像一些用来表述的句子，以及多数的书和杂志可能随着时间的推移而改变。仅仅随着时间的推移革新对编程语言来说通常是不够的，它要求人们编写高效运行并且易于
人们理解的代码，还必须整理代码，使其易于修改。对于某项任务T或许会有10种编写代码的方法，这些方法中有七成将会是冗杂的、低效的、且令人费解的，那么剩下的哪一个会在明年软件发布
的任务T中使用呢？
  