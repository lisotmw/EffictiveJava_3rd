  当你从集合中取出元素时编译器会为你插入不可见的映射，并且保证这个过程不会失败(再次假设，你所有的代码不会生成或是抑制任何编译器的警告)。
尽管偶然将一枚硬币放入邮票集合的预期可能显得有些牵强，然而问题是真实存在的。例如，很容易想象将一个BigInteger实例放入一个只允许放BigDecimal实例的集合
  如前所述，使用原始类型（不带类型参数的泛型）是合法的，但你决不能使用原始类型，如果你使用原始类型，
那么你就失去了泛型的安全性和表达性收益。考虑到你不应该使用原始类型，那么为什么语言的设计者起初允许泛型存在呢？
是为了兼容性。当泛型被加入进来的时候 Java 差不多进入了它的第二个十年了，因此有大量现存的代码没有使用泛型。
保持所有原始类型代码的合法性并且让它们同使用泛型的新代码混合使用，这种设计曾经饱受争议。然而这必须是合法的，它把类型参数的
实例传入参数设计为原始类型的方法，或是将原始类型参数传入泛型方法。这种设计去支持原始类型并用擦除实现泛型（第28条）的需求被称为迁移兼容性。
  尽管你不能使用像List一样的原始类型，但你完全可以使用参数化类型插入任意的对象（Object），那么List的原始类型和List的参数化类型之间
有什么不同？粗略说，前者（原始类型）是在泛型系统之外的，后者已经明确告诉了编译器，编译器有能力持有任意类型的对象。
你可以把List<String>传给List参数类型，但你不能把它传递给List<Object>参数类型。泛型有一种子类型化的规则，
List<String>是原始类型List的子类型，却不是参数化类型List<Object>的子类型（参见第28条）。结论就是，如果你使用诸如List一类的原始
类型，你将会失去类型的安全性，但使用参数化类型List<Object>就不会。
  我们通过下面这段代码，来证实上述结论：
  //code:
  这个程序可以被编译，但因为你使用原始类型的List，你会得到一个警告
  //code:
  实际上，当你隐形这个程序的时候，当程序对strings.get(0)的调用结果进行强制转换的时候（调用结果是一个Integer类型，要转成String类型）
你会得到一个ClassCaseException。这是一个编译器生成的强制类型转换，所以会被保证编译成功。在这个例子中我们忽略了这个警告并为此付出的代价。
  如果你在 unsafeAdd 方法声明时用类型参数List<Object>替换原始类型参数List并且试图编译这个程序，你会发现编译器不再继续编译，他会发出一条错误信息
  // code：
  对于一个元素类型未知的集合你或许会忍不住使用原始类型，并且无关紧要。比方说，假设你想写一个方法接收两个集合并且返回他们共有元素的数量。
加入你刚接触泛型，你会怎么写？
  这个方法可以正常工作，但它使用了原始类型，这是很危险的，有一种安全的替换就是使用无边界通配符类型。
如果你想使用泛型但你不知道或是不在意参数的实际类型到底是什么，你可以用问好来代替。例如，泛型Set的无边界通配符类型是
Set<?>(读作 "set of some type")。这是Set最泛化的参数类型，可以持有任何一种Set。下面是使用无边界通配符声明的 numElementsInCommon：
  // code:
  无边界通配符类型Set<?>和原始类型Set的区别是什么? 